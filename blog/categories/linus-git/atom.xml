<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linus, git | Raging Bits]]></title>
  <link href="http://jvrsantacruz.github.io/blog/categories/linus-git/atom.xml" rel="self"/>
  <link href="http://jvrsantacruz.github.io/"/>
  <updated>2013-09-28T21:42:01+02:00</updated>
  <id>http://jvrsantacruz.github.io/</id>
  <author>
    <name><![CDATA[Javier Santacruz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Change email in multiple git commits]]></title>
    <link href="http://jvrsantacruz.github.io/blog/2012/05/07/git-change-email/"/>
    <updated>2012-05-07T18:12:00+02:00</updated>
    <id>http://jvrsantacruz.github.io/blog/2012/05/07/git-change-email</id>
    <content type="html"><![CDATA[<p>I wanted to <em>replicate</em> an old git repo, in which I used as author my old university-work email,
but using my current gmail account as email. Changing it for both <em>commiter</em> and <em>author</em> for all
commits involves rewriting the whole repo. It&rsquo;s not difficult at all, but better work on a copy of
the repo, and remember that if you shoot yourself on the foot you can always get back by doing <code>git
reset --hard HEAD</code>.</p>

<p>The rewrite can be easily done by using the <code>filter-branch</code> tool applied to all branches at once:</p>

<pre><code>code-block::bash
git filter-branch --env-filter '
 GIT_AUTHOR_EMAIL=&lt;new.email@gmail.com&gt;
 GIT_COMMITER_EMAIL=&lt;new.email@gmail.com&gt;' --all
</code></pre>

<p>This is the <em>nuclear</em> way, it will rewrite absolutely all commits. This won&rsquo;t work straight if you
have code from collaborators, then you&rsquo;d lose their emails after the unconditional rewrite.</p>
]]></content>
  </entry>
  
</feed>
